WHAT IS BINARY SEARCH TREE ?
A Binary Search Tree (BST) is a specific type of binary tree where a particular rule is followed that for each node in the tree, the values in its left subtree are always smaller, and the values in its right subtree are always greater.




INSERTION OF NODE IN BST 
If key < root->data, go to the right subtree and insert
If key < root->data, go to the left subtree and insert
Rest recursion will handle

Time Complexity : O(logn) similar to binary search 




SEARCHING IN BST 
Base Case: If reach NULL, then return false 
If root->data > Key, go to left subtree
If root->data < Key, go to right subtree
If root->data = Key, return true 

Time Complexity : O(logn) i.e. O(height) in average case & O(n) in worst case (skew tree)
Space Complexity : O(H), where H is height of the tree in average case & O(n) in worst case (skew tree)

If we write iterative approach, then we can make Space constant 




PROPERTIES OF BST 
Inorder Traversal(LNR) of BST is always sorted




MINIMUM/MAXIMUM VALUE IN BST 
Implemented the code in Insertion.cpp file

Minimum value will be the leftmost node of the BST 
Step-1 : Make temp = root
Step-2 : While root != NULL, temp = temp->left 
Step-3 : return temp

Maximum value will be the rightmost node of the BST 
Step-1 : Make temp = root
Step-2 : While root != NULL, temp = temp->right
Step-3 : return temp




HOW TO CALCULATE INORDER PREDECESSOR AND INORDER SUCCESOR ? (HOMEWORK)




DELETION OF A NODE IN BST
If root->data > key, recursive call in left part 
If root->data < key, recursive call in right part 
If root->data = key, this condition forms 3 cases 
Case-1 : Node contains 0 child i.e. it's leaf node 
delete Node  
return NULL
Case-2 : Node contains 1 child either left child or right child exists 
For left child case, temp = root->left, delete root, return temp 
For right child case, temp = root->right, delete root, return temp 
Case-3 : Node contains 2 child 
Approach-1 -> Find max node from left subtree and replace it with current node, then delete that node you found
Approach-2 -> Find min node from right subtree and replace it with current node, then delete that node you found

Time Complexity : O(height) in average case & O(n) in worst case (skew tree)