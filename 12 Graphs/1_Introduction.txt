Graph is a type of a non-linear data structure which is combination of nodes and edges
Node : entity to store data
Edges : for connecting nodes 
Path : Sequence of nodes you're travelling in which each node comes exactly once 




TYPES OF GRAPH 
1. Undirected Graph 
    Can go from U to V as well as V to U
    Represented using lines
    Degree : Degree of a vertex is given by no. of edges connected to it 
2. Directed Graph
    Can go only from 1 way either U to V or V to U
    Represented using line with arrows
    Indegree : Indegree of a vertex is given by no. of edges coming towards the vertex 
    Outdegree : Outdegree of a vertex is given by no. of edges going away from the vertex 




WEIGHTED GRAPH 
Graphs having wieghts over it's edges 
1. Weighted Undirected Graph : If no weights given, assume weights as 1 on each edge 
2. Weighted Directed Graph : If no weights given, assume wieghts as 1 on each edge 




CYCLIC GRAPH 
If in graph, you're able to create a path which allow you to reach to an already travelled node again, then such graph is called Cyclic Graph 




ACYCLIC GRAPH 
If in graph, you're unable to create a path which allows you to reach to an already travelled node again, then such graph is called Acyclic Graph 




======================================================================================================================================
GRAPH REPRESENTATION 
input -> (no. of nodes, no. of edges & edges list)
1. Adjacency Matrix 
    Create a 2D adjacency matrix 
    Where index represents nodes 
    At places nodes connected, put 1
    At places nodes are not connected, put 0

    Space Compexity : O(n^2), where n represents no. of nodes 
    Do this using 2 for loops
2. Adjacency List 
    List Nodes -> tells what connection are available 
    Ek entity ke corresponding uske saare neighbours hain 
    Since 2nd entity mei bhot saare neighbours aa skte hain, toh voh ek list hogi & 1st entity is single object
    It can be implemented using map 
    Eg : 0 -> 1, 4 can be implemented as map< int , list<int> >;




DISCONNECTED GRAPH 
Graph having 2 or more components out of which atleast 1 set is disconnected 
  0
  |\
  | 3    2
  |/
  1




======================================================================================================================================
BFS TRAVERSAL (BREADTH FIRST SEARCH)
In this traversal algorithm, 1 node is selected & then, all of the adjacent nodes are visited one by one.

  0
    \
     \
  4---2           print -> 0, 2, 3, 4
   \ /
    3

  0
  | \
  \  \
   \  3 --- 1       print -> 0, 2, 3, 4, 1
    \       |
      2 --- 4

Implementation :
1. Data structure which tracks that whether a particular node is visited or not, all false initially no node visited
    unordered_map < node, bool >;
2. We need 1 more data structure queue (FIFO) in which i am gonna put all nodes and after pushing each node, gonna process it's neighbours 

  0 --- 3     2         adjacency list              visited DS (All false initially no node visited)
         \   /          0 -> 3                      0 -> F
          \ /           1 -> 2, 3, 4                1 -> F
        4--1            2 -> 1                      2 -> F
                        3 -> 0, 1                   3 -> F
                        4 -> 1                      4 -> F

OUTPUT : 0 3 1 2 4

If node isn't visited call BFS function (do this inside loop which goes till n), this is done to make sure Disconnected Graph is also covered
Step-1 : Push sourceNode in queue 
Step-2 : From queue save entry as firstNode
Step-3 : Remove it from queue
Step-4 : Mark it True in unordered_map (visited)
Step-5 : Print it in Answer
Step-6 : Push all neighbours of firstNode in queue & mark them visited (Make sure you can't push neighbour if it's True)
Step-7 : Recursively do all steps fromt Step-2 to Step-6

Time & Space Complexity : O(N+E), where N -> no. of vertices & E -> no. of edges




======================================================================================================================================
DEPTH TRAVERSAL (DEPTH FIRST SEARCH)
In this traversal algorithm, starting from a node, the algorithm explores as far as possible along each branch before backtracking.

  0 --- 4 --- 2
        |     |
        1     |       print -> 0, 4, 2, 3, 5, 1
        |     |
        5 --- 3

Implementation :
1. Data structure which tracks that whether a particular node is visited or not, all false initially no node visited
    unordered_map < node, bool >;

  0 --- 2 --- 1         adjacency list              visited DS (All false initially no node visited)
        |     |         0 -> 2                      0 -> F
        |     |         1 -> 2, 3                   1 -> F
        4 --- 3         2 -> 0, 1, 4                2 -> F
                        3 -> 1, 4                   3 -> F
                        4 -> 2, 3                   4 -> F

print -> 0, 2, 1, 3, 4

dfs(0) -> dfs(2) -> dfs(1) -> dfs(3) -> dfs(4) now backtracking goes on  until we reach dfs(0)
print -> 0, 2, 1, 3, 4

If node isn't visited call DFS function (do this inside loop which goes till n), this is done to make sure Disconnected Graph is also covered

Time & Space Complexity : Linear




======================================================================================================================================
CYCLE DETECION IN UNDIRECTED GRAPH VIA BFS
Let's consider undirected disconnected graph 
  1 -- 2          4 -- 5 -- 6
       |               |    |                 Yes, cycle detected
       3               7 -- 8 -- 9

Implementation :
1. Data structure which tracks that whether a particular node is visited or not, all false initially no node visited
    unordered_map < node, bool >;
2. We need 1 more data structure queue (FIFO) in which i am gonna put all nodes and after pushing each node, gonna process it's neighbours 
3. 1 data structure for parent in form x->y i.e. y is parent of x
4. Adjacency list 

Step-1 : Push sourceNode in queue 
Step-2 : From queue save entry as firstNode 
Step-3 : Remove it from queue
Step-4 : Mark it True in unordered_map (visited)
Step-5 : Push all neighbours of firstNode in queue (Make sure you can't push neighbour if it's True && it's parent of firstNode)
Step-6 : Recursively do all steps fromt Step-2 to Step-6
Step-7 : If you find a case when neighbour of firstNode is True but it's not parent of firstNode, Cycle is detected

In short, it would be completely same as BFS code, just 1 data structure of parent would be added along with the if condition talked above 

Time & Space Complexity (same as BFS) : O(N+E), where N -> no. of vertices & E -> no. of edges




======================================================================================================================================
CYCLE DETECION IN UNDIRECTED GRAPH VIA DFS
Let's consider undirected disconnected graph 
  1 -- 2          4 -- 5 -- 6
       |               |    |                 Yes, cycle detected
       3               7 -- 8 -- 9

Implementation :
1. Data structure which tracks that whether a particular node is visited or not, all false initially no node visited
    unordered_map < node, bool >;

If you find a case when neighbour of firstNode is True but it's not parent of firstNode, Cycle is detected

In short, it would be completely same as DFS code, just 1 data structure of parent would be added along with the if condition talked above 




======================================================================================================================================
CYCLE DETECTION IN DIRECTED GRAPH VIA DFS 
Adjacency List 
  1 -> 2
  2 -> 3, 4
  3 -> 7, 8
  4 -> 5                  Yes, cycle detected (4 5 6)
  5 -> 6
  6 -> 4
  7 -> 
  8 -> 7
It would be similar to the case for undirected, but we would need 1 more data structure (array or map) dfsVisited, which keeps track of which nodes have been called, returned call or haven't been called, along with this we need 1 more if condition 
If a node has been called, it's dfsVisited would be 1
If a node returned call, it's dfsVisited would be 0 again

If for a node, neighbour is visited & also it's dfsVisited is true, then cycle is present in directed graph 




======================================================================================================================================
TOPOLOGICAL SORT
It can be only applied to DAG (Directed Acyclic Graph)

Topological sort is a linear ordering of vertices such that for every directed edge from vertex 'u' to 'v', vertex 'u' always comes before 'v' in the ordering. Topological sort is not possible if graph is not a DAG
Multiple ordering can exist which satisfies above condition

Example
  Adjacency List
  0 -> 1, 3
  1 -> 2                      0 1 3 2 -> Valid TS 
  2 ->                        3 2 1 0 -> Invalid TS (0 should come before 1 in TS)
  3 -> 2

Why we cannot apply TS on directed cyclic graph ?
  Adjacency List
  1 -> 2
  2 -> 3
  3 -> 1
Now if you check 1 should appear before 2, 2 should appear before 3 and 3 should appear before 2 in linear ordering 
All 3 condiitons cannot be satisfied simultaneously, hence we cannot apply TS to an directed cyclic graph

This can be used in cycle detection of directed graph also, as if we are unable to find topological sort of a directed graph, then the graph would contain a cycle 


TOPOLOGICAL SORT USING DFS 
Implementation :
1 Data structure for visited nodes
1 Data structure (stack) for 
1 Data structure for adjacency list
Whenever you go back from a call (node returns a call), you push that node in the stack 

Adjacency List 
1 -> 2, 3
2 -> 4
3 -> 4
4 -> 5, 6
5 -> 6
6 ->

dfs(1) -> dfs(2) -> dfs(4) -> dfs(5) -> dfs(6)
then 6 returns call so push 6 into stack 
then 5 returns call so push 5 into stack (as 6 is visited)
then 4 returns call so push 4 into stack (as 5, 6 are visited)
then 2 returns call so push 2 into stack (4 is viisted)
then dfs(1) -> dfs(3) (as 3 is not visited)
then 3 returns call so push 3 into stack (4 is visited)
then 1 returns call so push 1 into stack (2, 3 are visited)

Order in stack(LIFO) from top would be 1, 3, 2, 4, 5, 6 which is a valid topological sort 

Why stack is needed ?
When we're unable to go further from any recursive function call, means we only have choice to back track, then we're putting that node in stack and stack has property of LIFO. So, in short we've putted such a node in stack which can't be propogated further, we've putted in stack so taht it comes out at last

Time Complexity : O(N+E) which is linear 
Space Complexity : Linear ( O(N) + O(N) + O(N) )      (visited + stack + recursive)


TOPOLOGICAL SORT USING BFS (Kahn's algorithm)
Adjacency List
1 -> 2, 3
2 -> 5
3 -> 5       Output: 1 2 3 5 4
5 -> 4

Implementation :
1. Make a data structure for storing indegree of each node 
    |0|1|1|1|2|           -> Indegree
     1 2 3 4 5            -> Nodes


Step-1 : Find indegree of all nodes 
Step-2 : Make a queue and insert all nodes having indegree 0
Step-3 : Do BFS with some small changes 
        a. Get front Node 
        b. pop from the queue  
        c. add front Node to the answer
        d. Get neighbours of front Node (considering above example when 1 is removed indegree of 2 & 3 reduces by 1, so indegree of 2 & 3     will become 0), so we can say when front Node is removed, then indegree of it's neighbours would be reduced by 1
Step-4 : Repeat Step-2 & Step-3

Time & Space Complexity : O(N+E), where N -> no. of vertices & E -> no. of edges




======================================================================================================================================
CYCLE DETECTION IN DIRECTED GRAPH VIA BFS 
If we're able to find topological sort of directed graph, then it's a directed acyclic graph 
But if we're unable to find valid topological sort of directed graph, then it must be cyclic graph 

In short, just making minute chnages & reusing Kahn's Algorithm 

Time & Space Complexity : O(N+E), where N -> no. of vertices & E -> no. of edges




======================================================================================================================================
SHORTEST PATH IN UNDIRECTED GRAPH VIA BFS 
Step-1 : Create a parent data structure using BFS 
Step-2 : Back Track from Destination node to Source node & store it in answer simultaneously
Step-3 : Reverse the answer to obtain the final corrected answer 

    2 --- 5
   /       \
  1 -- 3 -- 8           Start Node = 1 
   \       /            Destination Node = 8
    4 -6- 7             Shortest Path = 1 -> 3 -> 8

Time & Space Complexity : O(N+E), where N -> no. of vertices & E -> no. of edges




======================================================================================================================================
SHORTEST PATH IN DIRECTED ACYCLIC GRAPH (DAG)




======================================================================================================================================
SPANNING TREE 
When you convert a graph into a tree such that it contains N nodes and N-1 edges & every node is reachable by any other node, then its known as "Spanning tree"

Conditions for Spanning Tree:
1. N nodes and N-1 edges
2. Every node is reachable by any other node 


MINIMUM SPANNING TREE (MST)
Minimum cost of weight 


PRIM'S ALGORITHM FOR MST 
We need 3 data structures for Key(contains minimum distance between the nodes), MST(to track whether some node is included in MST or not) and Parent (Assuming indexing represent the nodes)
Then, initialize all values
In starting mark keys of al nodes as infinity
In starting mark all nodes inside MST as False 
In starting mark parent of all ndoes as -1 

For Source node, mark it's key as 0 & it's parent as -1
Step-1 : Find out node with minimum key value (minNode) and whose MST is false 
Step-2 : Mark that node as true in MST 
Step-3 : Find all adjacent nodes of Source node & update their Key values (if it's current value is less than already present values) & mark their parents as well
Step-4 : Repeat Step-1 to Step-3 untill all nodes in MST are marked as True
Step-5 : Parent array is your final answer 

Time Complexity : O(n^2)
If i use min heap, then i can get minimum value in O(1) time. We can do so by replacing above loop with priority queue 
In such case, time complexity would had been better i.e. O(nlogn)

DISJOINT SET 
It's a type of data structure used in Implementation of Kruskal's algorithm (Union by Rank & Path Compression)
It can be used to find out whether 2 nodes belong to the same commponent or not

It has 2 important operations :
1. findParent() or findSet()
2. Union() or UnionSet()

Understanding operations :
Let's say we have 5 disconnected components 1, 2, 3, 4, 5 and each component is it's own parent 
So, findParent operation on any component would currently give the same component as the result like findParent(1) -> 1
Let's say i told you to do Union(1,2), then you create a single component in which both nodes 1 & 2 are present & let's say u made 1 as parent of this component [1 2]
Do Union(4,5), then create 1 more component in which you put 4 & 5, and let's say u made 4 as parent of this component [4 5]
Do Union(3,5), then you saw that 5 is present in it's own component with 4 [4 5], so you put 3, 4 and 5 in one component and let's say u made 4 as parent of this whole component [4 5 3]
Do Union(1,3), you saw 1 is in it's own component [1 2] & 3 is in it's own component [3 4 5], so you put them in a single component and let's say u made 1 as parent of while component [1 2 3 4 5], now entire nodes are in single component 
This is just basic implementation 
You can do it's effective implementation using Union by Rank & Path Compression 

Now, let's talk about Union by Rank & Path Compression :
Let's say you have 7 disconnected components 1, 2, 3, 4, 5, 6, 7 and each component is it's own parent, so findParent(x) -> x
For union, firstly you need to make array of Rank from index 0 to 7 (bcoz we aren't gonna look for 0 as our components starts from 1)
Initially, Ranks of each component is 0

For doing Union, 1st find parents of both components, then look out at their ranks 
If ranks of both components is same, then you can attach in any way i.e. any one component can be the parent of the other component & make sure you increment the rank of the parent component
If ranks of both components is different, then you attach in a way that higher ranked component is the parent of lower ranked component, this is done in thsi way bcoz we always merge short tree in a bigger tree not vice-a-versa (To prevent unnecessary increase of depth)

Union(1,2)
1 -> 1 Rank = 0
2 -> 2 Rank = 0
Since, rank[1] = rank[2], so you can make anyone as parent
Let's say you made 1 as parent, so you need to increment rank of parent
parent[2] = 1, rank[1]++                                                        rank[1] = 1
2 -> 1

Union(2,3)
2 -> 1 Rank = 1
3 -> 3 Rank = 0
Since, rank[3] < rank[1], so set 1 as parent 
parent[3] = 1
(2 & 3) -> 1

Union(4,5)
4 -> 4 Rank = 0
5 -> 5 Rank = 0
Since, rank[4] = rank[5], so you can make anyone as parent
Let's say you made 4 as parent, so you need to increment rank of parent
parent[5] = 4, rank[4]++                                                        rank[4] = 1
5 -> 4

Union(6,7)
6 -> 6 Rank = 0
7 -> 7 Rank = 0
Since, rank[6] = rank[7], so you can make anyone as parent
Let's say you made 6 as parent, so you need to increment rank of parent
parent[7] = 6, rank[6]++                                                        rank[6] = 1
7 -> 6

Union(5,6)
5 -> 4 Rank = 1
6 -> 6 Rank = 1
Since, rank[6] = rank[4], so you can make anyone as parent
Let's say you made 4 as parent, so you need to increment rank of parent
parent[6] = 4, rank[4]++                                                        rank[4] = 2
We know 7 -> 6, so now (7 -> 6) -> 4 <- 5

Union(3,7)
3 -> 1 Rank = 1
7 -> 4 Rank = 2         (Parent means the end parent 7 -> 6 -> 4, so end parent fo 7 is 4)
Since, rank[1] < rank[4], so set 4 as parent 
parent[1] = 4
We know, (2 & 3) -> 1, so now ((2 & 3) -> 1) -> 4 <- (6 <- 7)
                                                ^
                                                |
                                                5

Let's say 1 more node would be there 8 -> 7, then when you were asked what's the parent of 8 you would go through first 7 then 6 then say 4
This will lead to consuming more time, so here logic of Path Compression comes that as soon as you detected in previous call that 4 is parent of 7, then instead of going through 6, attach 7 directly to 4
Now when you will be asked for parent of 7, you woudnt go through 6 then say 4, rather you would directly say 4 

If you were asked that whether 2 nodes lie in same component or not, then simply check their parents 
If parents of both are different, then nodes are part of different components 
If parents of both are same, then nodes are part of same component


KRUSKAL'S ALGORITHM FOR MST 
No need of Adjacency List here 
Rather we need a linear data structure, in which we are gonna store u, v & weight and we even need to sort the list on basis of weights
Considering the edges & weights as below
1--2  2
1--4  1
1--5  4
4--5  9
4--3  5
2--4  3
2--3  3
2--6  7
3--6  8
Sorted list would be like (wt, u, v) 
1  1  4
2  1  2
3  2  3
3  2  4
4  1  5
5  3  4
7  2  6
8  3  6
9  4  5
We're gonna process edges with shortest weights first
Step-1 : Find parents of both 
Step-2 : If parents of both are different, then peform Union/merge nbut if parents comes same, then ignore(do nothing)
Step-3 : Repeat Step-1 & Step-2 for edges with further weights in increasing order (find from Sorted list)
MST would be as below 
      4     3
    1 |   3 |
      |     |
5 --- 1 --- 2 --- 6
   4     2     7

Sorting function time complexity is mlogm, where m is total number of edges 
Studies tell that time complexity of findParent function & unionSet function is constant
Hence, the overall time complexity would be O(mlogm), where m is total number of edges
Space Complexity : O(n) i,e, Linear Space Complexity